image: node:20

stages:
  - prepare
  - test
  - security
  - deploy

variables:
  NPM_TOKEN: ${NPM_TOKEN}
  TEST_ENV_URL: "https://test-env.example.com"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/
    - .npm/

install_dependencies:
  stage: prepare
  script:
    - npm ci
  artifacts:
    paths:
      - node_modules/

lint:
  stage: test
  script:
    - npm run lint:check
    - npm run format:check

unit_tests:
  stage: test
  script:
    - npm run test
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml

e2e_tests:
  stage: test
  script:
    - npm run test:e2e

sonarqube:
  stage: test
  image: 
    name: sonarsource/sonar-scanner-cli
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
    SONAR_HOST_URL: "${SONAR_HOST_URL}"
    SONAR_TOKEN: "${SONAR_TOKEN}"
    GITLAB_TOKEN: "${GITLAB_TOKEN}"
  before_script:
    - |
      if [ -f package-lock.json ]; then
        npm ci
        npm run test
      fi
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
      -Dsonar.projectKey=${CI_PROJECT_PATH_SLUG}
      -Dsonar.projectName=${CI_PROJECT_PATH}
      -Dsonar.qualitygate.wait=true
      -Dsonar.sources=src
      -Dsonar.tests=test
      -Dsonar.test.inclusions=**/*.spec.ts,**/*.test.ts,**/*.e2e-spec.ts
      -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info
      -Dsonar.branch.name=${CI_COMMIT_REF_NAME}
  allow_failure: false  # делаем обязательным
  only:
    - master
    - merge_requests

secret_detection:
  stage: security
  image: 
    name: gitlab/gitlab-runner-helper:latest
  script:
    - |
      curl -sSL https://raw.githubusercontent.com/gitleaks/gitleaks/master/install.sh | sh
      gitleaks detect --source . --verbose --report-format json --report-path leak_report.json
  artifacts:
    reports:
      security: leak_report.json
  allow_failure: false

dependency_scan:
  stage: security
  script:
    - npm audit
    - npm run snyk:test
  allow_failure: true

build_image:
  stage: deploy
  image: docker:20
  services:
    - docker:20-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  only:
    - master

deploy_test:
  stage: deploy
  image: 
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig
    - export KUBECONFIG=kubeconfig
    - kubectl create namespace test --dry-run=client -o yaml | kubectl apply -f -
    - |
      for file in k8s/*.yaml; do
        envsubst < $file | kubectl apply -f -
      done
    - kubectl rollout status deployment/online-store-api -n test
  environment:
    name: test
    url: https://api-test.example.com
  only:
    - master
